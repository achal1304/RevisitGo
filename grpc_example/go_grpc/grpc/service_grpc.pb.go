// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessagingService_SendMessage_FullMethodName          = "/example.MessagingService/SendMessage"
	MessagingService_StreamMessages_FullMethodName       = "/example.MessagingService/StreamMessages"
	MessagingService_StreamClientMessages_FullMethodName = "/example.MessagingService/StreamClientMessages"
	MessagingService_BidirectionalStream_FullMethodName  = "/example.MessagingService/BidirectionalStream"
)

// MessagingServiceClient is the client API for MessagingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagingServiceClient interface {
	// Unary method
	SendMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	// Server streaming method
	StreamMessages(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (MessagingService_StreamMessagesClient, error)
	// Client streaming method
	StreamClientMessages(ctx context.Context, opts ...grpc.CallOption) (MessagingService_StreamClientMessagesClient, error)
	// Bi-directional streaming method
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (MessagingService_BidirectionalStreamClient, error)
}

type messagingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagingServiceClient(cc grpc.ClientConnInterface) MessagingServiceClient {
	return &messagingServiceClient{cc}
}

func (c *messagingServiceClient) SendMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, MessagingService_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) StreamMessages(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (MessagingService_StreamMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessagingService_ServiceDesc.Streams[0], MessagingService_StreamMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingServiceStreamMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagingService_StreamMessagesClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type messagingServiceStreamMessagesClient struct {
	grpc.ClientStream
}

func (x *messagingServiceStreamMessagesClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagingServiceClient) StreamClientMessages(ctx context.Context, opts ...grpc.CallOption) (MessagingService_StreamClientMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessagingService_ServiceDesc.Streams[1], MessagingService_StreamClientMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingServiceStreamClientMessagesClient{stream}
	return x, nil
}

type MessagingService_StreamClientMessagesClient interface {
	Send(*MessageRequest) error
	CloseAndRecv() (*MessageResponse, error)
	grpc.ClientStream
}

type messagingServiceStreamClientMessagesClient struct {
	grpc.ClientStream
}

func (x *messagingServiceStreamClientMessagesClient) Send(m *MessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messagingServiceStreamClientMessagesClient) CloseAndRecv() (*MessageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagingServiceClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (MessagingService_BidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessagingService_ServiceDesc.Streams[2], MessagingService_BidirectionalStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingServiceBidirectionalStreamClient{stream}
	return x, nil
}

type MessagingService_BidirectionalStreamClient interface {
	Send(*MessageRequest) error
	Recv() (*MessageResponse, error)
	grpc.ClientStream
}

type messagingServiceBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *messagingServiceBidirectionalStreamClient) Send(m *MessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messagingServiceBidirectionalStreamClient) Recv() (*MessageResponse, error) {
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessagingServiceServer is the server API for MessagingService service.
// All implementations must embed UnimplementedMessagingServiceServer
// for forward compatibility
type MessagingServiceServer interface {
	// Unary method
	SendMessage(context.Context, *MessageRequest) (*MessageResponse, error)
	// Server streaming method
	StreamMessages(*StreamRequest, MessagingService_StreamMessagesServer) error
	// Client streaming method
	StreamClientMessages(MessagingService_StreamClientMessagesServer) error
	// Bi-directional streaming method
	BidirectionalStream(MessagingService_BidirectionalStreamServer) error
	mustEmbedUnimplementedMessagingServiceServer()
}

// UnimplementedMessagingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessagingServiceServer struct {
}

func (UnimplementedMessagingServiceServer) SendMessage(context.Context, *MessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessagingServiceServer) StreamMessages(*StreamRequest, MessagingService_StreamMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedMessagingServiceServer) StreamClientMessages(MessagingService_StreamClientMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamClientMessages not implemented")
}
func (UnimplementedMessagingServiceServer) BidirectionalStream(MessagingService_BidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (UnimplementedMessagingServiceServer) mustEmbedUnimplementedMessagingServiceServer() {}

// UnsafeMessagingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagingServiceServer will
// result in compilation errors.
type UnsafeMessagingServiceServer interface {
	mustEmbedUnimplementedMessagingServiceServer()
}

func RegisterMessagingServiceServer(s grpc.ServiceRegistrar, srv MessagingServiceServer) {
	s.RegisterService(&MessagingService_ServiceDesc, srv)
}

func _MessagingService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).SendMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagingServiceServer).StreamMessages(m, &messagingServiceStreamMessagesServer{stream})
}

type MessagingService_StreamMessagesServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type messagingServiceStreamMessagesServer struct {
	grpc.ServerStream
}

func (x *messagingServiceStreamMessagesServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagingService_StreamClientMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessagingServiceServer).StreamClientMessages(&messagingServiceStreamClientMessagesServer{stream})
}

type MessagingService_StreamClientMessagesServer interface {
	SendAndClose(*MessageResponse) error
	Recv() (*MessageRequest, error)
	grpc.ServerStream
}

type messagingServiceStreamClientMessagesServer struct {
	grpc.ServerStream
}

func (x *messagingServiceStreamClientMessagesServer) SendAndClose(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messagingServiceStreamClientMessagesServer) Recv() (*MessageRequest, error) {
	m := new(MessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessagingService_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessagingServiceServer).BidirectionalStream(&messagingServiceBidirectionalStreamServer{stream})
}

type MessagingService_BidirectionalStreamServer interface {
	Send(*MessageResponse) error
	Recv() (*MessageRequest, error)
	grpc.ServerStream
}

type messagingServiceBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *messagingServiceBidirectionalStreamServer) Send(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messagingServiceBidirectionalStreamServer) Recv() (*MessageRequest, error) {
	m := new(MessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessagingService_ServiceDesc is the grpc.ServiceDesc for MessagingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessagingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.MessagingService",
	HandlerType: (*MessagingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _MessagingService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _MessagingService_StreamMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamClientMessages",
			Handler:       _MessagingService_StreamClientMessages_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStream",
			Handler:       _MessagingService_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
